version: 2
jobs:
  build:
    working_directory: ~/repo
    machine: true
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          - v1-dependencies-
      - run:
          name: Decode dotenv file
          command: echo $ENV_FILE | base64 --decode > .env
      - run:
          name: Install build tools
          command: |
            # install nvm and nodejs
            curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash
            source ~/.bash_profile
            nvm install v9.11.1
            nvm alias default  v9.11.1

            # Install yarn
            npm install -g yarn

            # Add nvm settings to circleci's build environment
            echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
            echo "[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"" >> $BASH_ENV
      - run:
          name: Check versions
          command: |
            grep -H "" /etc/*version ; grep -H "" /etc/*release
            nvm --version
            node --version
            yarn --version
      - run:
          name: Install modules for Client
          command: |
            # if 404 occurred, remove yarn.lock OR yarn upgrade locally before
            #rm client/yarn.lock
            yarn --cwd client install
      - run:
         name: Install modules for Server
         command: yarn install
      - run:
          name: Run docker containers for CI
          command: yarn ci:up
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      #- run:
      #    name: Wait for db
      #    command: dockerize -wait tcp://localhost:27017 -timeout 1m
      - run:
          name: Lint Server
          command: yarn ci:lint
      - run:
         name: Test Server and Report coverage to Codecov
         command: |
          yarn ci:test
          bash <(curl -s https://codecov.io/bash)
      # - run:
      #     name: Login to DockerHub
      #     command: docker login -u="$DOCKERHUB_USER" -p="$DOCKERHUB_PASSWORD"
      # - run:
      #     name: Build image for production
      #     command: yarn stage:build
      # - run:
      #     name: Push image to DockerHub for production
      #     command: yarn stage:push
      # - run:
      #     name: Deploy image to Heroku for staging
      #     command: yarn stage:deploy
